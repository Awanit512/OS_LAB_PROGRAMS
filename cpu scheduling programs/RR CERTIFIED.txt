#include<stdio.h>

struct process{
    int id,at, tat, wt ,rt, bt,ct,cit;
};
struct process p[100];

int main()
{
    int n,cpuidle,css=0,index=0;
    printf("\n ENTER THE NUMBER OF PROCESS IN READDY QUEUE:  ");
    scanf("%d",&n);

    int i,j,a,flag=0;
    int tq;
    printf("\nENTER THE TIME QUANTUM OF CPU:  ");
    scanf("%d",&tq);
    /*tq=2;n=6;
    p[0].bt=3;
     p[1].bt=2;
      p[2].bt=2;
       p[3].bt=4;
        p[4].bt=6;
         p[5].bt=8;
    p[0].at=2;
    p[1].at=3;
    p[2].at=5;
    p[3].at=14;
    p[4].at=16;
    p[5].at=17;*/


    for(i=0 ;i<n ;i++)
    {
        p[i].id = i+1;
        printf("\nENTER THE ARRIVING TIME OF PROCESS[%d]:  ",p[i].id);
        scanf("%d",&p[i].at);
        printf("\nENTER THE BUSRT TIME OF PROCESS[%d]:  ", p[i].id);
        scanf("%d",&p[i].bt);
	p[i].rt= p[i].bt;
    }
    struct process temp;
    for(i=0;i<n ;i++)
    {
        for (j=i+1;j<n;j++)
        {
            if(p[i].at>p[j].at)
            {
                temp= p[i];
                p[i]= p[j];
                p[j]=temp;
            }
        }
    }
      i=0;
      cpuidle=p[0].at;

   int min = p[0].at;
   j=0;
   int k=0;
   int queue[5000];
   for(a=0;a<5000;a++)
    queue[a]=-1;

   queue[0] = 0;
   int l;


   while(k<=j)
   {

	   if(p[queue[k]].rt>tq)
	   {
		   for(l=0;l<tq;l++)
		   {
			   if(p[i+1].at == min)
			   {
				   queue[j+1]=i+1;
				   i++;
				   j++;
			   }
			   min++;
		   }
		   p[queue[k]].rt-=tq;
		   ///
		   a=i+1;
		   while(min == p[a].at)
           {

            queue[j+1]=a;
           j++;
           a++;i++;
           }

		   ////
		   queue[j+1]=queue[k];
		   j++;
	   }
	   else
	   {
		   for(l=0;l<p[queue[k]].rt;l++)
		   {
			   if(p[i+1].at == min)
			   {
				   queue[j+1]=i+1;
				   j++;
				   i++;
			   }
			   min++;
		   }
		   p[queue[k]].ct = min;
		   flag++;
	   }
	   printf("k=%d\n",k);
	   k++;
if(flag==n)
        break;

   if(queue[k]==-1 && flag!=n )

      {cpuidle+=p[i+1].at-min;

        min=p[i+1].at;
        queue[k]=i+1;
        j++;i++;
        printf("jal  k=%d\n",k);
      }


   }
   printf("\nGANTT CHART : ");
   for(i=0;i<k;i++)
   {
       printf("| P[%d] ",queue[i]);
   }
   for(i=0;i<n;i++)
   {
	   p[i].tat = p[i].ct - p[i].at;
	   p[i].wt = p[i].tat - p[i].bt;
   }
   printf("\nPROCESS NUMBER    ARRIVAL TIME    BURST TIME      COMPLITION TIME       TURN AROUND TIME");
    for(i=0;i<n;i++)
        printf("\np[%d]              %2d              %2d                %2d                         %2d",p[i].id,p[i].at,p[i].bt,p[i].ct,p[i].tat);


    printf("\n");
    a=0;
    while(queue[a]!=-1)
    {index++;
    a++;}

    for(a=0;a<index-1;a++)
    {
    if(queue[a]!=queue[a+1])
    {
    css+=1;
    }
    }
printf("\n\nCONTEXT SWITCHING=%d \nCPU IDLE=%d\n\n\n",css,cpuidle);

    return 0;
}
